-- MySQL Script generated by MySQL Workbench
-- Mon Dec 11 20:02:01 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema projetofinalkb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `projetofinalkb` ;

-- -----------------------------------------------------
-- Schema projetofinalkb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `projetofinalkb` DEFAULT CHARACTER SET utf8 ;
USE `projetofinalkb` ;

-- -----------------------------------------------------
-- Table `projetofinalkb`.`Produtos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projetofinalkb`.`Produtos` ;

CREATE TABLE IF NOT EXISTS `projetofinalkb`.`Produtos` (
  `idProduto` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `Quantidade` INT UNSIGNED NULL,
  PRIMARY KEY (`idProduto`),
  UNIQUE INDEX `idProduto_UNIQUE` (`idProduto` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `projetofinalkb`.`ProdInfo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projetofinalkb`.`ProdInfo` ;

CREATE TABLE IF NOT EXISTS `projetofinalkb`.`ProdInfo` (
  `idProdKey` INT UNSIGNED NOT NULL,
  `Nome` VARCHAR(128) NOT NULL,
  `Descricao` VARCHAR(4096) NULL,
  UNIQUE INDEX `idProdKey_UNIQUE` (`idProdKey` ASC) VISIBLE,
  PRIMARY KEY (`idProdKey`),
  CONSTRAINT `idProd`
    FOREIGN KEY (`idProdKey`)
    REFERENCES `projetofinalkb`.`Produtos` (`idProduto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `projetofinalkb`.`Usuarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projetofinalkb`.`Usuarios` ;

CREATE TABLE IF NOT EXISTS `projetofinalkb`.`Usuarios` (
  `idUsuarios` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(128) NOT NULL,
  `validador` VARCHAR(64) NOT NULL,
  PRIMARY KEY (`idUsuarios`),
  UNIQUE INDEX `idUsarios_UNIQUE` (`idUsuarios` ASC) VISIBLE,
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `projetofinalkb`.`Vendas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projetofinalkb`.`Vendas` ;

CREATE TABLE IF NOT EXISTS `projetofinalkb`.`Vendas` (
  `idVendas` INT NOT NULL AUTO_INCREMENT,
  `ValorTotal` INT NOT NULL,
  `DataVenda` VARCHAR(45) NOT NULL COMMENT 'Ano-mÃªs-Dia Hora:Minuto:Segundo',
  `pago` INT NULL DEFAULT 0,
  PRIMARY KEY (`idVendas`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `projetofinalkb`.`VendasInfo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projetofinalkb`.`VendasInfo` ;

CREATE TABLE IF NOT EXISTS `projetofinalkb`.`VendasInfo` (
  `idVenda` INT NOT NULL AUTO_INCREMENT,
  `idProd` INT UNSIGNED NOT NULL,
  `ValorProd` INT NULL,
  `idUser` INT NOT NULL,
  INDEX `IdProdFk_idx` (`idProd` ASC) VISIBLE,
  INDEX `idUserFk_idx` (`idUser` ASC) VISIBLE,
  CONSTRAINT `idVendaFK`
    FOREIGN KEY (`idVenda`)
    REFERENCES `projetofinalkb`.`Vendas` (`idVendas`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `IdProdFk`
    FOREIGN KEY (`idProd`)
    REFERENCES `projetofinalkb`.`Produtos` (`idProduto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `idUserFk`
    FOREIGN KEY (`idUser`)
    REFERENCES `projetofinalkb`.`Usuarios` (`idUsuarios`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `projetofinalkb`.`Administradores`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projetofinalkb`.`Administradores` ;

CREATE TABLE IF NOT EXISTS `projetofinalkb`.`Administradores` (
  `idAdministrador` INT NOT NULL,
  PRIMARY KEY (`idAdministrador`),
  CONSTRAINT `UserFk`
    FOREIGN KEY (`idAdministrador`)
    REFERENCES `projetofinalkb`.`Usuarios` (`idUsuarios`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `projetofinalkb`.`EnderecoDeEntrega`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projetofinalkb`.`EnderecoDeEntrega` ;

CREATE TABLE IF NOT EXISTS `projetofinalkb`.`EnderecoDeEntrega` (
  `idUsuario` INT NOT NULL,
  `cep` VARCHAR(8) NOT NULL,
  `rua` VARCHAR(128) NOT NULL,
  `municipio` VARCHAR(45) NOT NULL,
  `estado` VARCHAR(45) NOT NULL,
  `complemento` VARCHAR(45) NULL,
  PRIMARY KEY (`idUsuario`),
  CONSTRAINT `FkUsuario`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `projetofinalkb`.`Usuarios` (`idUsuarios`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `projetofinalkb`.`Pagamento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projetofinalkb`.`Pagamento` ;

CREATE TABLE IF NOT EXISTS `projetofinalkb`.`Pagamento` (
  `idPagamento` INT NOT NULL AUTO_INCREMENT,
  `idVendaFk` INT NOT NULL,
  `metodo` VARCHAR(45) NOT NULL,
  `valor` INT NULL,
  PRIMARY KEY (`idPagamento`),
  INDEX `FkVendasPag_idx` (`idVendaFk` ASC) VISIBLE,
  CONSTRAINT `FkVendasPag`
    FOREIGN KEY (`idVendaFk`)
    REFERENCES `projetofinalkb`.`Vendas` (`idVendas`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `projetofinalkb`.`carrinho`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projetofinalkb`.`carrinho` ;

CREATE TABLE IF NOT EXISTS `projetofinalkb`.`carrinho` (
  `idUser` INT NOT NULL,
  `idProd` INT UNSIGNED NOT NULL,
  `qtd` INT NOT NULL,
  INDEX `FkProdCar_idx` (`idProd` ASC) VISIBLE,
  INDEX `FkUserCar_idx` (`idUser` ASC) VISIBLE,
  UNIQUE INDEX `par_unico` (`idUser` ASC, `idProd` ASC) VISIBLE,
  CONSTRAINT `FkUserCar`
    FOREIGN KEY (`idUser`)
    REFERENCES `projetofinalkb`.`Usuarios` (`idUsuarios`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FkProdCar`
    FOREIGN KEY (`idProd`)
    REFERENCES `projetofinalkb`.`Produtos` (`idProduto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `projetofinalkb`.`UsuariosInfo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projetofinalkb`.`UsuariosInfo` ;

CREATE TABLE IF NOT EXISTS `projetofinalkb`.`UsuariosInfo` (
  `idUsuariosInfo` INT NOT NULL,
  `Nome` VARCHAR(128) NOT NULL,
  `DataNascimento` VARCHAR(45) NOT NULL,
  `Telefone` VARCHAR(45) NULL,
  `cpf` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idUsuariosInfo`),
  CONSTRAINT `FkUserUInfo`
    FOREIGN KEY (`idUsuariosInfo`)
    REFERENCES `projetofinalkb`.`Usuarios` (`idUsuarios`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `projetofinalkb`.`ProdutosPreco`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projetofinalkb`.`ProdutosPreco` ;

CREATE TABLE IF NOT EXISTS `projetofinalkb`.`ProdutosPreco` (
  `idProd` INT UNSIGNED NOT NULL,
  `Valor` INT NULL,
  PRIMARY KEY (`idProd`),
  UNIQUE INDEX `idProd_UNIQUE` (`idProd` ASC) VISIBLE,
  CONSTRAINT `FKProdPreco`
    FOREIGN KEY (`idProd`)
    REFERENCES `projetofinalkb`.`Produtos` (`idProduto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `projetofinalkb`.`secaoUsuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projetofinalkb`.`secaoUsuario` ;

CREATE TABLE IF NOT EXISTS `projetofinalkb`.`secaoUsuario` (
  `idUsuario` INT NOT NULL,
  `chaveDaSecao` VARCHAR(64) NOT NULL,
  `timeout` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idUsuario`),
  UNIQUE INDEX `chaveDaSecao_UNIQUE` (`chaveDaSecao` ASC) VISIBLE,
  CONSTRAINT `FkUserSecao`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `projetofinalkb`.`Usuarios` (`idUsuarios`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `projetofinalkb`.`ProdutosImagens`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projetofinalkb`.`ProdutosImagens` ;

CREATE TABLE IF NOT EXISTS `projetofinalkb`.`ProdutosImagens` (
  `idProduto` INT UNSIGNED NOT NULL,
  `staticlink` VARCHAR(512) NULL,
  INDEX `fk_prod_img_idx` (`idProduto` ASC) VISIBLE,
  CONSTRAINT `fk_prod_img`
    FOREIGN KEY (`idProduto`)
    REFERENCES `projetofinalkb`.`Produtos` (`idProduto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `projetofinalkb` ;

-- -----------------------------------------------------
-- Placeholder table for view `projetofinalkb`.`TodasCompras`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projetofinalkb`.`TodasCompras` (`idVenda` INT, `idProd` INT, `ValorProd` INT, `idUser` INT, `DataVenda` INT);

-- -----------------------------------------------------
-- Placeholder table for view `projetofinalkb`.`ProdutosCompletos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projetofinalkb`.`ProdutosCompletos` (`idProduto` INT, `NOME` INT, `Descricao` INT, `Valor` INT, `Quantidade` INT, `staticlink` INT);

-- -----------------------------------------------------
-- Placeholder table for view `projetofinalkb`.`TodosUsuariosCompletos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projetofinalkb`.`TodosUsuariosCompletos` (`idUsuarios` INT, `Nome` INT, `DataNascimento` INT, `Telefone` INT, `cpf` INT, `email` INT, `cep` INT, `rua` INT, `municipio` INT, `estado` INT, `complemento` INT);

-- -----------------------------------------------------
-- Placeholder table for view `projetofinalkb`.`carrinhopreco`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projetofinalkb`.`carrinhopreco` (`idUser` INT, `idProd` INT, `qtd` INT, `Valor` INT, `PP.Valor * c.qtd` INT);

-- -----------------------------------------------------
-- Placeholder table for view `projetofinalkb`.`ProdutosInfo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projetofinalkb`.`ProdutosInfo` (`idProduto` INT, `NOME` INT, `Descricao` INT, `Valor` INT);

-- -----------------------------------------------------
-- procedure NovaVenda
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`NovaVenda`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE NovaVenda(Cliente INT)
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

	START TRANSACTION;
		SET @SOMA = (
			SELECT SUM(PP.Valor * c.qtd) FROM ProdutosPreco as PP
			INNER JOIN carrinho as c ON c.idProd = PP.idProd
			WHERE c.idUser = Cliente
		);

		INSERT INTO Vendas (ValorTotal, DataVenda, pago) VALUES(@SOMA, NOW(), 0);

		INSERT INTO VendasInfo (idVenda, idProd, ValorProd, idUser)
			SELECT (
					SELECT idVendas FROM Vendas ORDER BY idVendas DESC LIMIT 1
				),
				c.idProd,
				pp.Valor,
				Cliente
			FROM carrinho as c
			INNER JOIN ProdutosPreco AS pp ON pp.idProd = c.idProd;

		SET SQL_SAFE_UPDATES = 0;
		UPDATE Produtos AS p
			INNER JOIN carrinho AS c ON c.idProd = p.idProduto
			SET p.Quantidade = p.Quantidade - c.qtd
			WHERE c.idUser = Cliente;
		SET SQL_SAFE_UPDATES = 1;

		CALL LimparCarrinho(Cliente);
		COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure NovoCliente
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`NovoCliente`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE NovoCliente (EMAILS VARCHAR(128), VALIDADORS VARCHAR(64))
BEGIN
	INSERT INTO Usuarios (email, validador) VALUES(EMAILS, VALIDADORS);
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure LimparCarrinho
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`LimparCarrinho`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE LimparCarrinho (idCliente INT)
BEGIN
	DELETE FROM carrinho AS c WHERE c.idUser = idCliente;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure NovoPagamento
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`NovoPagamento`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE NovoPagamento(idVenda INT, Metodo VARCHAR(45), Valor INT)
BEGIN
	-- NovoPagamento sÃ³ deve ser chamado depois da venda
	INSERT INTO `Pagamento` (`idVendaFk`,`metodo`,`valor`)
	VALUES (idVenda,Metodo,Valor);
    CALL VerificarPagamento(idVenda);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure VerificarPagamento
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`VerificarPagamento`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE VerificarPagamento(idVenda INT)
BEGIN
	-- VerificarPagamento sÃ³ deve ser chamado depois do pagamento
	SET @SOMA = (SELECT SUM(p.valor) FROM Pagamento AS p WHERE p.idVendaFk = idVenda);
    IF @SOMA IS NOT NULL THEN
		UPDATE Vendas AS v SET pago = 1 WHERE v.idVendas = idVenda AND @SOMA >= v.ValorTotal;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AdicinarAoCarrinho
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`AdicinarAoCarrinho`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE AdicinarAoCarrinho (idCliente INT, idProduto INT, quantidade INT)
BEGIN
	INSERT INTO `carrinho`
	(`idUser`, `idProd`, `qtd`)
	VALUES (idCliente, idProduto, quantidade)
    ON DUPLICATE KEY UPDATE `qtd` = quantidade;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AdicionarAoCarrinho
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`AdicionarAoCarrinho`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE AdicionarAoCarrinho (idCliente INT, idProduto INT, quantidade INT)
BEGIN
	IF (SELECT COUNT(*) FROM carrinho AS c WHERE c.idUser = idCliente AND c.idProd = idProduto) > 0 THEN
		UPDATE carrinho AS c
        SET c.qtd = quantidade
        WHERE c.idUser = idCliente AND c.idProd = idProduto;
    ELSE
		INSERT INTO `carrinho`
		(`idUser`, `idProd`, `qtd`)
		VALUES (idCliente, idProduto, quantidade);
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure InsercaoCompletaProduto
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`InsercaoCompletaProduto`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE InsercaoCompletaProduto(NOMES VARCHAR(128), DESCRICAOS VARCHAR(4096), PRECOS INT, QUANTIDADES INT, ImageLinkStatic VARCHAR(512))
BEGIN
    INSERT INTO `Produtos` (`Quantidade`) VALUES (QUANTIDADES);
    SET @ULTIMO = (SELECT idProduto FROM Produtos ORDER BY idProduto DESC LIMIT 1);
    
    INSERT INTO `ProdInfo` (`idProdKey`, `Nome`, `Descricao`) VALUES (@ULTIMO, NOMES, DESCRICAOS);
    INSERT INTO `ProdutosPreco` (`idProd`, `Valor`) VALUES (@ULTIMO, PRECOS);
    INSERT INTO `ProdutosImagens` (`idProduto`, `staticlink`) VALUES (@ULTIMO, ImageLinkStatic);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DelecaoCompletaProduto
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`DelecaoCompletaProduto`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE DelecaoCompletaProduto(ProdId INT)
CREATE DEFINER=`henrique`@`%` PROCEDURE `DelecaoCompletaProduto`(ProdId INT)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            ROLLBACK;
        END;

    START TRANSACTION;
        SET SQL_SAFE_UPDATES = 0;
        DELETE FROM ProdInfo WHERE idProdKey = ProdId;
        DELETE FROM ProdutosPreco WHERE idProd = ProdId;
        DELETE FROM carrinho WHERE idProd = ProdId;
        DELETE FROM vendasinfo WHERE idProd = ProdId;
        DELETE FROM ProdutosImagens Where idProduto = ProdId;
        DELETE FROM Produtos WHERE idProduto = ProdId;
        SET SQL_SAFE_UPDATES = 1;
        COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure InserirClinteInfo
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`InserirClinteInfo`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE InserirClinteInfo(userId INT, Nomes VARCHAR(128), DataNascimentos VARCHAR(45), Telefones VARCHAR(45), cpfs VARCHAR(45))
BEGIN
	INSERT INTO `UsuariosInfo` (`idUsuariosInfo`, `Nome`, `DataNascimento`, `Telefone`, `cpf`)
    VALUES (userId, Nomes, DataNascimentos, Telefones, cpfs)
    ON DUPLICATE KEY UPDATE
        Nome = Nomes,
        DataNascimento = DataNascimentos,
        Telefone = Telefones,
        cpf = cpfs;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure InserirEndereco
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`InserirEndereco`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE InserirEndereco(
			idUsuarios INT,
			ceps VARCHAR(8),
			ruas VARCHAR(128),
			municipios VARCHAR(45),
			estados VARCHAR(45),
			complementos VARCHAR(45)
            )
BEGIN
	INSERT INTO `EnderecoDeEntrega` (`idUsuario`, `cep`, `rua`, `municipio`, `estado`, `complemento`)
    VALUES (idUsuarios, ceps, ruas, municipios, estados, complementos)
    ON DUPLICATE KEY UPDATE
        cep = ceps,
        rua = ruas,
        municipio = municipios,
        estado = estados,
        complemento = complementos;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure InsercaoCompletaUsuario
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`InsercaoCompletaUsuario`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE InsercaoCompletaUsuario(
	email VARCHAR(128),
    validador VARCHAR(64),
    Nome VARCHAR(128),
    DataNascimento VARCHAR(45),
    Telefone VARCHAR(45),
    cpf VARCHAR(45),
    cep VARCHAR(8),
    rua VARCHAR(128),
    municipio VARCHAR(45),
    estado VARCHAR(45),
    complemento VARCHAR(45))
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;
	START TRANSACTION;
		CALL NovoCliente(email, validador);
		SET @ULTIMO =  (SELECT idUsuarios FROM Usuarios ORDER BY idUsuarios DESC LIMIT 1);
		CALL InserirClinteInfo(@ULTIMO, Nome, DataNascimento, Telefone, cpf);
		CALL InserirEndereco(@ULTIMO, cep, rua, municipio, estado, complemento);
		COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure InserirOuAtualizarCarrinho
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`InserirOuAtualizarCarrinho`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE InserirOuAtualizarCarrinho (idCliente INT, idProduto INT, quantidade INT)
BEGIN
	INSERT INTO `carrinho`
	(`idUser`, `idProd`, `qtd`)
	VALUES (idCliente, idProduto, quantidade)
	ON DUPLICATE KEY UPDATE `qtd` = quantidade;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure NormalizacaoDeSecao
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`NormalizacaoDeSecao`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE NormalizacaoDeSecao()
BEGIN
	SET SQL_SAFE_UPDATES = 0;
	DELETE FROM secaoUsuario WHERE timeout < NOW();
    SET SQL_SAFE_UPDATES = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure NovaSecaoUsuario
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`NovaSecaoUsuario`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE NovaSecaoUsuario(idUsuario INT, chaveSecao VARCHAR(64), Limite VARCHAR(45))
BEGIN
	INSERT INTO secaoUsuario (idUsuario, chaveDaSecao, timeout)
    VALUES (idUsuario, chaveSecao, Limite)
    ON DUPLICATE KEY UPDATE timeout = Limite;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AtualizacaoCompletaUsuario
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`AtualizacaoCompletaUsuario`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE AtualizacaoCompletaUsuario(
	idUser INT,
    Nomes VARCHAR(128),
    DataNascimentos VARCHAR(45),
    Telefones VARCHAR(45),
    cpfs VARCHAR(45),
    ceps VARCHAR(8),
    ruas VARCHAR(128),
    municipios VARCHAR(45),
    estados VARCHAR(45),
    complementos VARCHAR(45))
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;
	START TRANSACTION;
		SET SQL_SAFE_UPDATES = 0;
		UPDATE UsuariosInfo
		SET Nome=Nomes, DataNascimento=DataNascimentos, Telefone=Telefones, cpf=cpfs
		WHERE idUsuariosInfo = idUser;
		
		UPDATE EnderecoDeEntrega
		SET cep=ceps, rua=ruas, municipio=municipios, estado=estados, complemento=complementos
		WHERE idUsuario = idUser;
		SET SQL_SAFE_UPDATES = 1;
		COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure FinalizarSecaoUsuario
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`FinalizarSecaoUsuario`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE FinalizarSecaoUsuario(usuarioId INT)
BEGIN
	SET SQL_SAFE_UPDATES = 0;
	DELETE FROM secaoUsuario WHERE idUsuario = usuarioId;
    SET SQL_SAFE_UPDATES = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure NovaImagem
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`NovaImagem`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE NovaImagem(ProdId INT, LinkStatic VARCHAR(512))
BEGIN
	INSERT INTO ProdutosImagens (idProduto, staticlink) VALUES (ProdId, LinkStatic);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure RemoverTodasImagensDoProduto
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`RemoverTodasImagensDoProduto`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE RemoverTodasImagensDoProduto(ProdId INT)
BEGIN
	SET SQL_SAFE_UPDATES = 0;
    DELETE FROM ProdutosImagens WHERE idProduto = ProdId;
    SET SQL_SAFE_UPDATES = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure NovaImagemProduto
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`NovaImagemProduto`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE NovaImagemProduto(ProdId INT, LinkStatic VARCHAR(512))
BEGIN
	INSERT INTO ProdutosImagens (idProduto, staticlink) VALUES (ProdId, LinkStatic);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AtualizarProdutoInfo
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`AtualizarProdutoInfo`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE AtualizarProdutoInfo(ProdId INT, ProdNome VARCHAR(128), ProdDesc VARCHAR(4096), ProdValor INT)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    START TRANSACTION;
            SET SQL_SAFE_UPDATES = 0;

            UPDATE prodinfo 
            SET `Nome` = ProdNome, `Descricao` = ProdDesc
            WHERE `idProdKey` = ProdId;

            UPDATE produtospreco
            SET `Valor` = ProdValor
            WHERE `idProd` = ProdId;

            SET SQL_SAFE_UPDATES = 1;

            COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DelecaoCompletaUsuario
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`DelecaoCompletaUsuario`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE DelecaoCompletaUsuario(UserId INT)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            ROLLBACK;
        END;

    START TRANSACTION;
        SET SQL_SAFE_UPDATES = 0;
        DELETE FROM enderecodeentrega WHERE `idUsuario` = UserId;
        DELETE FROM administradores WHERE `idAdministrador`= UserId;
        DELETE FROM carrinho WHERE `idUser` = UserId;
        DELETE FROM secaousuario WHERE `idUsuario` = UserId;
        DELETE FROM usuariosinfo WHERE `idUsuariosInfo` = UserId;
        DELETE FROM vendasinfo WHERE `idUser` = UserId;
        DELETE FROM usuarios WHERE `idUsuarios` = UserId;
        SET SQL_SAFE_UPDATES = 1;
        COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure RemoverItemCarrinho
-- -----------------------------------------------------

USE `projetofinalkb`;
DROP procedure IF EXISTS `projetofinalkb`.`RemoverItemCarrinho`;

DELIMITER $$
USE `projetofinalkb`$$
CREATE PROCEDURE RemoverItemCarrinho(idUsuaio INT, idProduto INT)
BEGIN
    SET SQL_SAFE_UPDATES = 0;
    DELETE FROM carrinho WHERE `idUser` = idUsuario AND `idProd` = idProduto;
    SET SQL_SAFE_UPDATES = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `projetofinalkb`.`TodasCompras`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projetofinalkb`.`TodasCompras`;
DROP VIEW IF EXISTS `projetofinalkb`.`TodasCompras` ;
USE `projetofinalkb`;
CREATE  OR REPLACE VIEW `TodasCompras` AS
	SELECT
		VI.idVenda,
        VI.idProd,
        VI.ValorProd,
        VI.idUser,
        V.DataVenda
	FROM VendasInfo AS VI
    LEFT JOIN Vendas AS V
		ON VI.idVenda = V.idVendas;

-- -----------------------------------------------------
-- View `projetofinalkb`.`ProdutosCompletos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projetofinalkb`.`ProdutosCompletos`;
DROP VIEW IF EXISTS `projetofinalkb`.`ProdutosCompletos` ;
USE `projetofinalkb`;
CREATE  OR REPLACE VIEW `ProdutosCompletos` AS
SELECT P.idProduto, PINF.NOME, PINF.Descricao, PP.Valor, P.Quantidade, PI.staticlink
FROM Produtos AS P
INNER JOIN ProdInfo AS PINF ON PINF.idProdKey = P.idProduto
INNER JOIN ProdutosPreco AS PP ON PP.idProd = P.idProduto
RIGHT JOIN ProdutosImagens AS PI ON PI.idProduto = p.idProduto;

-- -----------------------------------------------------
-- View `projetofinalkb`.`TodosUsuariosCompletos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projetofinalkb`.`TodosUsuariosCompletos`;
DROP VIEW IF EXISTS `projetofinalkb`.`TodosUsuariosCompletos` ;
USE `projetofinalkb`;
CREATE  OR REPLACE VIEW `TodosUsuariosCompletos` AS
	SELECT
		U.idUsuarios,
		UI.Nome,
		UI.DataNascimento,
		UI.Telefone,
		UI.cpf,
		U.email,
		EE.cep,
		EE.rua,
		EE.municipio,
		EE.estado,
		EE.complemento
	FROM Usuarios AS U
	INNER JOIN UsuariosInfo AS UI ON UI.idUsuariosInfo = U.idUsuarios
	INNER JOIN EnderecoDeEntrega AS EE ON EE.idUsuario = U.idUsuarios;

-- -----------------------------------------------------
-- View `projetofinalkb`.`carrinhopreco`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projetofinalkb`.`carrinhopreco`;
DROP VIEW IF EXISTS `projetofinalkb`.`carrinhopreco` ;
USE `projetofinalkb`;
CREATE  OR REPLACE VIEW `carrinhopreco` AS
SELECT c.idUser, c.idProd, c.qtd, PP.Valor, PP.Valor * c.qtd
FROM carrinho AS c
LEFT JOIN ProdutosPreco AS PP ON c.idProd = PP.idProd;

-- -----------------------------------------------------
-- View `projetofinalkb`.`ProdutosInfo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `projetofinalkb`.`ProdutosInfo`;
DROP VIEW IF EXISTS `projetofinalkb`.`ProdutosInfo` ;
USE `projetofinalkb`;
CREATE  OR REPLACE VIEW `ProdutosInfo` AS
SELECT P.idProduto, PINF.NOME, PINF.Descricao, PP.Valor
FROM Produtos AS P
INNER JOIN ProdInfo AS PINF ON PINF.idProdKey = P.idProduto
INNER JOIN ProdutosPreco AS PP ON PP.idProd = P.idProduto;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
